// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Supera_Monitor_Back.Helpers;

#nullable disable

namespace Supera_Monitor_Back.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250114202905_CreateAccountAndAccountRoleTables")]
    partial class CreateAccountAndAccountRoleTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Supera_Monitor_Back.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("bit");

                    b.Property<int?>("Account_Created_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Role_Id")
                        .HasColumnType("int");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Account_Created_Id");

                    b.HasIndex("Role_Id");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcceptTerms = true,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "galax1y@test.com",
                            Name = "galax1y",
                            PasswordHash = "$2b$10$a46QGCAIbzhXEKJl36cD1OBQE5xMNyATdvrrfh1s/wtqTdawg2lHu",
                            PasswordReset = new DateTime(2025, 1, 14, 17, 29, 5, 365, DateTimeKind.Local).AddTicks(1289),
                            Phone = "123456789",
                            ResetTokenExpires = new DateTime(2025, 1, 14, 17, 29, 5, 365, DateTimeKind.Local).AddTicks(1276),
                            Role_Id = 8,
                            VerificationToken = ""
                        });
                });

            modelBuilder.Entity("Supera_Monitor_Back.Entities.AccountRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Account_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Account_Id");

                    b.ToTable("AccountRefreshToken");
                });

            modelBuilder.Entity("Supera_Monitor_Back.Entities.AccountRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountRole");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 4,
                            Role = "Teacher"
                        },
                        new
                        {
                            Id = 2,
                            Role = "Assistant"
                        },
                        new
                        {
                            Id = 1,
                            Role = "Student"
                        });
                });

            modelBuilder.Entity("Supera_Monitor_Back.Entities.Account", b =>
                {
                    b.HasOne("Supera_Monitor_Back.Entities.Account", "Account_Created")
                        .WithMany("Created_Account")
                        .HasForeignKey("Account_Created_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Supera_Monitor_Back.Entities.AccountRole", "AccountRole")
                        .WithMany("Account")
                        .HasForeignKey("Role_Id");

                    b.Navigation("AccountRole");

                    b.Navigation("Account_Created");
                });

            modelBuilder.Entity("Supera_Monitor_Back.Entities.AccountRefreshToken", b =>
                {
                    b.HasOne("Supera_Monitor_Back.Entities.Account", "Account")
                        .WithMany("AccountRefreshToken")
                        .HasForeignKey("Account_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Supera_Monitor_Back.Entities.Account", b =>
                {
                    b.Navigation("AccountRefreshToken");

                    b.Navigation("Created_Account");
                });

            modelBuilder.Entity("Supera_Monitor_Back.Entities.AccountRole", b =>
                {
                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
